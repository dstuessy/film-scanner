###################
# go build stage
###################

FROM --platform=linux/arm32v7 dstuessy/opencv:arm32v7-alpine AS film-scanner-build

RUN cat /tmp/opencv4_ldflags
RUN cat /tmp/opencv4_cflags
RUN mkdir /app
COPY . /app
WORKDIR /app
RUN go mod download
# RUN env CGO_ENABLED=1 GOOS=linux GOARCH=arm GOARM=7 go build -tags musl -a -ldflags="-w -s" -installsuffix cgo
# RUN env CGO_ENABLED=1 go build -v -ldflags='-linkmode external -extldflags "-static"' -installsuffix cgo
# RUN env CGO_CFLAGS="$(cat /tmp/opencv4_cflags)" \
# CGO_CXXFLAGS="$(cat /tmp/opencv4_cflags)" \
# CGO_LDFLAGS="$(cat /tmp/opencv4_ldflags)" \
# CGO_CPPFLAGS="$(cat /tmp/opencv4_cflags)" \
# RUN env CGO_ENABLED=1 \
RUN env CGO_ENABLED=1 \
  CGO_CFLAGS="$(cat /tmp/opencv4_cflags)" \
  CGO_CXXFLAGS="$(cat /tmp/opencv4_cflags)" \
  CGO_LDFLAGS="$(cat /tmp/opencv4_ldflags)" \
  CGO_CPPFLAGS="$(cat /tmp/opencv4_cflags)" \
  go build -v -tags customenv -ldflags='-linkmode external -extldflags "-static"'

CMD ["echo", "Build complete!"]

###################
# build output stage
###################

FROM film-scanner-build AS film-scanner-output

COPY --from=film-scanner-build /app/film-scanner .

CMD ["echo", "files exported"]
